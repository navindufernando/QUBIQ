generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  DEV
  PM
  ADMIN
}

model User {
  id                String              @id @default(uuid())
  firstName         String
  lastName          String
  email             String
  password          String?
  role              UserRole
  phone             String?
  bio               String?
  picture           String?
  city              String?
  country           String?
  team              String?
  project           String?
  emailVerified     Boolean             @default(false)
  verificationToken String?
  resetToken        String?
  resetTokenExpiry  DateTime?
  googleId          String?
  createdAt         DateTime            @default(now())
  updatedAt         DateTime?           @updatedAt
  teamMemberId      Int?                @unique
  teamMember        TeamMember?         @relation(fields: [teamMemberId], references: [id])
  passwordResets    PasswordReset[]
  emailVerifications EmailVerification[]
  refreshTokens     RefreshToken[]
  comments          Comment[]
  notifications     Notification[]
  sprints           Sprint[]
  projectReviews    ProjectReview[]
  feedbackItems     FeedbackItem[]
  communicationLogs CommunicationLog[]
  teamInsights      TeamInsight[]
  replies           Reply[]

  @@unique([email, role])
  @@index([email])
  @@index([googleId])
  @@index([verificationToken])
  @@index([resetToken])
}

model PasswordReset {
  id             String   @id @default(uuid())
  userId         String
  resetToken     String   @unique
  createdAt      DateTime @default(now())
  expiresAt      DateTime

  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model EmailVerification {
  id                String   @id @default(uuid())
  userId            String
  verificationToken String   @unique
  createdAt         DateTime @default(now())
  expiresAt         DateTime

  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model RefreshToken {
  id        String   @id @default(uuid())
  token     String   @unique
  userId    String
  expiresAt DateTime
  createdAt DateTime @default(now())
  
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([token])
}

model Comment {
  id        Int       @id @default(autoincrement())
  content   String
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
  
  taskId    Int
  task      Task      @relation(fields: [taskId], references: [id], onDelete: Cascade)
  authorId  String
  author    User      @relation(fields: [authorId], references: [id], onDelete: Cascade)
  
  @@index([taskId])
  @@index([authorId])
}

model Notification {
  id          Int       @id @default(autoincrement())
  type        String
  message     String
  read        Boolean   @default(false)
  createdAt   DateTime  @default(now())
  recipientId String
  recipient   User      @relation(fields: [recipientId], references: [id], onDelete: Cascade)
  
  @@index([recipientId])
}

model Project {
  id          String       @id @default(uuid())
  projectName String
  description String
  startDate   String
  endDate     String
  createdAt   DateTime     @default(now())
  updatedAt   DateTime?    @updatedAt
  phase       String?
  progress    Int?
  sprints     Sprint[]
  tasks       Task[]
  teamMembers TeamMember[]
}

model Task {
  id          Int         @id @default(autoincrement())
  name        String
  description String?
  startDate   DateTime
  endDate     DateTime
  status      String
  projectId   String
  assigneeId  Int?
  sprintId    String?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime?   @updatedAt
  assignee    TeamMember? @relation(fields: [assigneeId], references: [id])
  project     Project     @relation(fields: [projectId], references: [id])
  sprint      Sprint?     @relation(fields: [sprintId], references: [id])
  comments    Comment[]
}

model TeamMember {
  id             Int       @id @default(autoincrement())
  name           String
  email          String    @unique
  role           String?
  projectId      String
  efficiency     Float?
  tasksCompleted Int       @default(0)
  currentLoad    Int       @default(0)
  createdAt      DateTime  @default(now())
  updatedAt      DateTime? @updatedAt
  isActive       Boolean   @default(true)
  tasks          Task[]
  project        Project   @relation(fields: [projectId], references: [id])
  user           User?
}

model Sprint {
  id          String       @id @default(uuid())
  sprintName  String
  description String?
  goal        String?
  status      String
  startDate   DateTime
  endDate     DateTime
  projectId   String?
  createdAt   DateTime     @default(now())
  updatedAt   DateTime?    @updatedAt
  userId      String       
  user        User         @relation(fields: [userId], references: [id])
  project     Project?     @relation(fields: [projectId], references: [id])
  tasks       Task[]

  @@index([userId])
}

model PerformanceRecord {
  id        Int       @id @default(autoincrement())
  month     String
  year      Int
  completed Int
  overdue   Int
  projectId Int
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
}

model EfficiencyRecord {
  id         Int       @id @default(autoincrement())
  week       String
  year       Int
  efficiency Float
  projectId  Int
  createdAt  DateTime  @default(now())
  updatedAt  DateTime? @updatedAt
}

model LoginAttempt {
  id        String    @id @default(uuid())
  email     String
  success   Boolean
  ipAddress String?
  userAgent String?
  createdAt DateTime  @default(now())
  
  @@index([email])
  @@index([ipAddress])
  @@index([createdAt])
}

model ProjectReview {
  id           String         @id @default(uuid())
  name         String
  description  String?
  startDate    String?
  endDate      String?
  status       String?
  completion   Int            @default(0)
  budget       String?
  spent        String?
  createdAt    DateTime       @default(now())
  updatedAt    DateTime?      @updatedAt
  creatorId    String
  creator      User           @relation(fields: [creatorId], references: [id], onDelete: Cascade)
  objectives   Objective[]
  risks        Risk[]
  highlights   Highlight[]
  feedbackItems FeedbackItem[]
  communicationLogs CommunicationLog[]
  teamInsights TeamInsight[]

  @@index([creatorId])
}

model Objective {
  id           String        @id @default(uuid())
  content      String
  createdAt    DateTime      @default(now())
  updatedAt    DateTime?     @updatedAt
  projectReviewId String
  projectReview ProjectReview @relation(fields: [projectReviewId], references: [id], onDelete: Cascade)

  @@index([projectReviewId])
}

model Risk {
  id           String        @id @default(uuid())
  severity     String
  description  String
  createdAt    DateTime      @default(now())
  updatedAt    DateTime?     @updatedAt
  projectReviewId String
  projectReview ProjectReview @relation(fields: [projectReviewId], references: [id], onDelete: Cascade)

  @@index([projectReviewId])
}

model Highlight {
  id           String        @id @default(uuid())
  content      String
  createdAt    DateTime      @default(now())
  updatedAt    DateTime?     @updatedAt
  projectReviewId String
  projectReview ProjectReview @relation(fields: [projectReviewId], references: [id], onDelete: Cascade)

  @@index([projectReviewId])
}

model FeedbackItem {
  id           String        @id @default(uuid())
  content      String
  sentiment    String
  date         String
  projectReviewId String
  projectReview ProjectReview @relation(fields: [projectReviewId], references: [id], onDelete: Cascade)
  authorId     String
  author       User          @relation(fields: [authorId], references: [id], onDelete: Cascade)
  replies      Reply[]

  @@index([projectReviewId])
  @@index([authorId])
}

model Reply {
  id           String        @id @default(uuid())
  content      String
  date         String
  feedbackItemId String
  feedbackItem FeedbackItem @relation(fields: [feedbackItemId], references: [id], onDelete: Cascade)
  authorId     String
  author       User          @relation(fields: [authorId], references: [id], onDelete: Cascade)

  @@index([feedbackItemId])
  @@index([authorId])
}

model CommunicationLog {
  id           String        @id @default(uuid())
  stakeholderName String
  stakeholderType String
  contactPerson String
  position     String
  date         String
  channel      String
  sentiment    String
  summary      String
  actionItems  String[]      // Matches frontend "actionItems"
  projectReviewId String
  projectReview ProjectReview @relation(fields: [projectReviewId], references: [id], onDelete: Cascade)
  creatorId    String
  creator      User          @relation(fields: [creatorId], references: [id], onDelete: Cascade)

  @@index([projectReviewId])
  @@index([creatorId])
}

model TeamInsight {
  id           String        @id @default(uuid())
  memberName   String
  memberRole   String
  date         String
  rating       Float
  content      String
  focusAreas   String[]      // Matches frontend "focusAreas"
  projectReviewId String
  projectReview ProjectReview @relation(fields: [projectReviewId], references: [id], onDelete: Cascade)
  creatorId    String
  creator      User          @relation(fields: [creatorId], references: [id], onDelete: Cascade)

  @@index([projectReviewId])
  @@index([creatorId])
}