// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Project {
  id          String       @id @default(uuid())
  projectName String
  description String
  phase       String?
  progress    Int?
  startDate   String
  endDate     String
  createdAt   DateTime     @default(now())
  updatedAt   DateTime?    @updatedAt
  tasks       Task[]
  teamMembers TeamMember[]
  sprints     Sprint[]
}

model Task {
  id          Int         @id @default(autoincrement())
  name        String
  description String?
  startDate   DateTime
  endDate     DateTime
  status      String
  projectId   String
  project     Project     @relation(fields: [projectId], references: [id])
  assigneeId  Int?
  assignee    TeamMember? @relation(fields: [assigneeId], references: [id])
  createdAt   DateTime    @default(now())
  updatedAt   DateTime?   @updatedAt
}

model TeamMember {
  id             Int       @id @default(autoincrement())
  name           String
  email          String    @unique
  role           String?
  projectId      String
  project        Project   @relation(fields: [projectId], references: [id])
  tasks          Task[]
  efficiency     Float?
  tasksCompleted Int       @default(0)
  currentLoad    Int       @default(0)
  createdAt      DateTime  @default(now())
  updatedAt      DateTime? @updatedAt
}

// PM Dashboard schema
model Sprint {
  id          String       @id @default(uuid())
  sprintName  String
  description String?
  goal        String?
  status      SprintStatus @default(PLANNED)
  startDate   DateTime
  endDate     DateTime
  projectId   String?
  project     Project?     @relation(fields: [projectId], references: [id])
  createdAt   DateTime     @default(now())
  updatedAt   DateTime?    @updatedAt
}

enum SprintStatus {
  PLANNED
  ACTIVE
  COMPLETED
}

model PerformanceRecord {
  id        Int       @id @default(autoincrement())
  month     String
  year      Int
  completed Int
  overdue   Int
  projectId Int
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
}

model EfficiencyRecord {
  id         Int       @id @default(autoincrement())
  week       String
  year       Int
  efficiency Float
  projectId  Int
  createdAt  DateTime  @default(now())
  updatedAt  DateTime? @updatedAt
}
